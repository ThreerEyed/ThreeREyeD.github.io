<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>threereyed</title>
  <icon>https://www.gravatar.com/avatar/b8e5319dcf81fce2fe0939fe5e85735b</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://threereyed.top/"/>
  <updated>2020-05-25T07:18:11.982Z</updated>
  <id>http://threereyed.top/</id>
  
  <author>
    <name>threereyed</name>
    <email>2622509069@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go语言基础学习day02</title>
    <link href="http://threereyed.top/2020/05/25/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0day02/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0day02/"/>
    <id>http://threereyed.top/2020/05/25/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0day02/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0day02/</id>
    <published>2020-05-25T01:57:50.000Z</published>
    <updated>2020-05-25T07:18:11.982Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><div class="note info">            <p>本节内容承接上节内容，关于Go语言的基础学习</p>          </div><div class="note warning">            <p>这是一个创建于 2020-05-25 的文章，其中的信息可能已经有所发展或是发生改变。</p>          </div><h2 id="Go语言关键字"><a href="#Go语言关键字" class="headerlink" title="Go语言关键字"></a>Go语言关键字</h2><h3 id="go的25个关键字"><a href="#go的25个关键字" class="headerlink" title="go的25个关键字"></a>go的25个关键字</h3><p>break default func interface select<br>case defer go map struct<br>chan else goto package switch<br>const fallthrough if range type<br>continue for import return var</p><h3 id="关键词解释"><a href="#关键词解释" class="headerlink" title="关键词解释"></a>关键词解释</h3><p>1.break：break 用于跳出循环<br>2.default：用于选择结构的默认选项（switch、select）<br>3.func：函数定义<br>4.interface：定义接口<br>5.select：go语言特有的channel选择结构<br>6.case：选择结构标签<br>7.chan：定义channel<br>8.const：常量<br>9.continue：跳过本次循环<br>10.defer：延迟执行内容（收尾工作）有点类似C++的析构，但是它是再函数结尾的时候去执行（也就是栈即将被释放的时候）<br>11.go：并发执行<br>12.map：map类型<br>13.struct：定义结构体<br>14.else：选择结构<br>15.goto：跳转语句<br>16.package：包<br>17.switch：选择结构<br>18.fallthrough：如果case带有fallthrough，程序会继续执行下一条case,不会再判断下一条case的值<br>19.if：选择结构<br>20.range：从slice、map等结构中取元素<br>21.type：定义类型<br>22.for：循环<br>23.import：导入包<br>24.return：返回<br>25.var：定义变量</p><h3 id="go的保留字"><a href="#go的保留字" class="headerlink" title="go的保留字"></a>go的保留字</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Constants:    <span class="literal">true</span>  <span class="literal">false</span>  <span class="literal">iota</span>  <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">Types:    <span class="keyword">int</span>  <span class="keyword">int8</span>  <span class="keyword">int16</span>  <span class="keyword">int32</span>  <span class="keyword">int64</span>  </span><br><span class="line"><span class="keyword">uint</span>  <span class="keyword">uint8</span>  <span class="keyword">uint16</span>  <span class="keyword">uint32</span>  <span class="keyword">uint64</span>  <span class="keyword">uintptr</span></span><br><span class="line"><span class="keyword">float32</span>  <span class="keyword">float64</span>  <span class="keyword">complex128</span>  <span class="keyword">complex64</span></span><br><span class="line"><span class="keyword">bool</span>  <span class="keyword">byte</span>  <span class="keyword">rune</span>  <span class="keyword">string</span>  error</span><br><span class="line"></span><br><span class="line">Functions:   <span class="built_in">make</span>  <span class="built_in">len</span>  <span class="built_in">cap</span>  <span class="built_in">new</span>  <span class="built_in">append</span>  <span class="built_in">copy</span>  <span class="built_in">close</span>  <span class="built_in">delete</span></span><br><span class="line"><span class="built_in">complex</span>  <span class="built_in">real</span>  <span class="built_in">imag</span></span><br><span class="line"><span class="built_in">panic</span>  <span class="built_in">recover</span></span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="变量来源"><a href="#变量来源" class="headerlink" title="变量来源"></a>变量来源</h3><p>变量来源于数学，是计算机语言中能储存计算结果或能表示值抽象概念。</p><p>变量可以通过变量名访问。</p><h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><p>一般常用的有，数值型、布尔型、字符串类型、派生类型</p><p>派生类型包括：</p><ul><li>(a) 指针类型（Pointer）</li><li>(b) 数组类型</li><li>(c) 结构化类型(struct)</li><li>(d) Channel 类型</li><li>(e) 函数类型</li><li>(f) 切片类型</li><li>(g) 接口类型（interface）</li><li>(h) Map 类型</li></ul><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><h4 id="第一种方式：指定变量类型，如果没有初始化，则变量默认为零值"><a href="#第一种方式：指定变量类型，如果没有初始化，则变量默认为零值" class="headerlink" title="第一种方式：指定变量类型，如果没有初始化，则变量默认为零值"></a>第一种方式：指定变量类型，如果没有初始化，则变量默认为零值</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量的声明</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">int</span> = <span class="number">1</span> <span class="comment">// 声明一个变量名为a的变量，其类型为int，值为1</span></span><br><span class="line">fmt.Println(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b <span class="keyword">string</span> = <span class="string">"threereyed"</span> <span class="comment">// 声明一个变量名为b的变量，其类型为string，值为threereyed</span></span><br><span class="line">fmt.Println(b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c <span class="keyword">bool</span> = <span class="literal">true</span></span><br><span class="line">fmt.Println(c)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果不给变量设置值则默认为零值</span></span><br><span class="line"><span class="keyword">var</span> d <span class="keyword">int</span></span><br><span class="line">fmt.Println(d)</span><br><span class="line"><span class="keyword">var</span> e <span class="keyword">string</span></span><br><span class="line">fmt.Println(e)</span><br><span class="line"><span class="keyword">var</span> f <span class="keyword">bool</span></span><br><span class="line">fmt.Println(f)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码的输出为：</p><blockquote><p>D:\Go\src\github.com\ThreeREyed\studygo\day02&gt;go run main.go<br>1<br>threereyed<br>true<br>0</p><p>false</p></blockquote><h4 id="第二种，根据值自行判定变量类型"><a href="#第二种，根据值自行判定变量类型" class="headerlink" title="第二种，根据值自行判定变量类型"></a>第二种，根据值自行判定变量类型</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据值来判断类型</span></span><br><span class="line"><span class="keyword">var</span> g = <span class="number">20</span></span><br><span class="line"><span class="keyword">var</span> h = <span class="string">"threereyed"</span></span><br><span class="line">fmt.Println(g, h)</span><br></pre></td></tr></table></figure><p>以上代码的输出为：</p><blockquote><p>20 threereyed</p></blockquote><h4 id="第三种，省略-var，-，-只在函数中体现（短变量声明）"><a href="#第三种，省略-var，-，-只在函数中体现（短变量声明）" class="headerlink" title="第三种，省略 var，:= ， 只在函数中体现（短变量声明）"></a>第三种，省略 var，:= ， 只在函数中体现（短变量声明）</h4><p><strong>注意 \</strong>:=** 左侧如果没有声明新的变量，就产生编译错误**</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据值来判断类型</span></span><br><span class="line"><span class="keyword">var</span> g = <span class="number">20</span></span><br><span class="line"><span class="keyword">var</span> h = <span class="string">"threereyed"</span></span><br><span class="line">fmt.Println(g, h)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略var 使用:= 的方式来声明，:= 左侧必须是有新的变量产生</span></span><br><span class="line">i := <span class="number">30</span></span><br><span class="line">g := <span class="number">40</span> <span class="comment">// 此时产生编译错误no new variables on left side of :=go</span></span><br><span class="line">g, j := <span class="number">40</span>, <span class="number">50</span> <span class="comment">// 因为左侧有新的变量声明，所以不会有编译错误</span></span><br></pre></td></tr></table></figure><h4 id="多变量声明"><a href="#多变量声明" class="headerlink" title="多变量声明"></a>多变量声明</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类型相同多个变量, 非全局变量</span></span><br><span class="line"><span class="keyword">var</span> vname1, vname2, vname3 <span class="keyword">type</span></span><br><span class="line">vname1, vname2, vname3 = v1, v2, v3</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vname1, vname2, vname3 = v1, v2, v3 <span class="comment">// 和 python 很像,不需要显示声明类型，自动推断</span></span><br><span class="line"></span><br><span class="line">vname1, vname2, vname3 := v1, v2, v3 <span class="comment">// 出现在 := 左侧的变量不应该是已经被声明过的，否则会导致编译错误</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这种因式分解关键字的写法一般用于声明全局变量</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    a <span class="keyword">int</span></span><br><span class="line">    b <span class="keyword">string</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>如果在相同的代码块中，我们不可以再次对于相同名称的变量使用初始化声明，例如：a := 20 就是不被允许的，编译器会提示错误 no new variables on left side of :=，但是 a = 20 是可以的，因为这是给相同的变量赋予一个新的值。</p><p>如果你在定义变量 a 之前使用它，则会得到编译错误 undefined: a。</p><p>如果你声明了一个局部变量却没有在相同的代码块中使用它，同样会得到编译错误</p><p>但是全局变量是<strong>允许声明但不使用</strong>。</p><p>同一类型的多个变量可以声明在同一行</p><h2 id="变量名"><a href="#变量名" class="headerlink" title="变量名"></a>变量名</h2><h3 id="命名方式"><a href="#命名方式" class="headerlink" title="命名方式"></a>命名方式</h3><p>Go 语言变量名由字母、数字、下划线组成，其中首个字符不能为数字。</p><p><strong>驼峰命名</strong></p><p>大驼峰（eg: ThreeEyed），小驼峰(threeEyed)</p><p><strong>下划线连接</strong></p><p>eg: three_eyed</p><p>匿名变量 <code>-</code></p><p>空白标识符 _ 也被用于抛弃值，如值 5 在：_, b = 5, 7 中被抛弃。</p><p>_ 实际上是一个只写变量，你不能得到它的值。这样做是因为 Go 语言中你必须使用所有被声明的变量，但有时你并不需要使用从一个函数得到的所有返回值。 </p><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>常量是一个简单值的标识符，在程序运行过程中，不会被修改的量。</p><p>常量中的数据类型只可以是布尔型、数字型（整数型、浮点型和复数）和字符串型。</p><p><strong>关键字<code>const</code></strong></p><h3 id="常量声明方式"><a href="#常量声明方式" class="headerlink" title="常量声明方式"></a>常量声明方式</h3><p><strong>声明单个常量</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> identifier [<span class="keyword">type</span>] = value</span><br></pre></td></tr></table></figure><p>你可以省略类型说明符 [type]，因为编译器可以根据变量的值来推断其类型。</p><ul><li>显式类型定义： <code>const b string = &quot;abc&quot;</code></li><li>隐式类型定义： <code>const b = &quot;abc&quot;</code></li></ul><p>常量可以用len(), cap(), unsafe.Sizeof()函数计算表达式的值。常量表达式中，函数必须是内置函数，否则编译不过</p><p><strong>单行声明常量</strong></p><p>多个相同类型的声明可以简写为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> c_name1, c_name2 = value1, value2</span><br></pre></td></tr></table></figure><p><strong>批量声明常量</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">conset &#123;</span><br><span class="line">name1 <span class="keyword">string</span></span><br><span class="line">name2 <span class="keyword">bool</span></span><br><span class="line">name3 <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">name1 = <span class="number">1</span></span><br><span class="line">name2</span><br><span class="line">name3</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(name1, name2, name3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>const 批量声明常量时，如果没有被赋值，那么上一行的值会赋给下一行没有赋值的常量，以上代码输出内容为</p><blockquote><p>1 1 1</p></blockquote><h3 id="iota"><a href="#iota" class="headerlink" title="iota"></a>iota</h3><h4 id="常量计数器"><a href="#常量计数器" class="headerlink" title="常量计数器"></a>常量计数器</h4><p>iota，特殊常量，可以认为是一个可以被编译器修改的常量。</p><p>iota 在 const关键字出现时将被重置为 0(const 内部的第一行之前)，const 中每新增一行常量声明将使 iota 计数一次(iota 可理解为 const 语句块中的行索引)。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">a = <span class="literal">iota</span></span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> d = <span class="literal">iota</span></span><br><span class="line"><span class="keyword">const</span> e = <span class="literal">iota</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(a, b, c, d, e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码输出为：</p><blockquote><p>0 1 2 0 0</p></blockquote><p>批量声明中的iota 随着常量增加而增加，但是const 再出现时，iota 被重新设置为0</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">const</span> (</span><br><span class="line">            a = <span class="literal">iota</span>   <span class="comment">//0</span></span><br><span class="line">            b          <span class="comment">//1</span></span><br><span class="line">            c          <span class="comment">//2</span></span><br><span class="line">            d = <span class="string">"ha"</span>   <span class="comment">//独立值，iota += 1</span></span><br><span class="line">            e          <span class="comment">//"ha"   iota += 1</span></span><br><span class="line">            f = <span class="number">100</span>    <span class="comment">//iota +=1</span></span><br><span class="line">            g          <span class="comment">//100  iota +=1</span></span><br><span class="line">            h = <span class="literal">iota</span>   <span class="comment">//7,恢复计数</span></span><br><span class="line">            i          <span class="comment">//8</span></span><br><span class="line">    )</span><br><span class="line">    fmt.Println(a,b,c,d,e,f,g,h,i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码输出为：</p><blockquote><p>0  1 2 ha ha 100 100 7 8</p></blockquote><p>充分说明iota 是一个常量计数器</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    i=<span class="number">1</span>&lt;&lt;<span class="literal">iota</span></span><br><span class="line">    j=<span class="number">3</span>&lt;&lt;<span class="literal">iota</span></span><br><span class="line">    k</span><br><span class="line">    l</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"i="</span>,i)</span><br><span class="line">    fmt.Println(<span class="string">"j="</span>,j)</span><br><span class="line">    fmt.Println(<span class="string">"k="</span>,k)</span><br><span class="line">    fmt.Println(<span class="string">"l="</span>,l)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例运行结果为：</p><blockquote><p>i= 1<br>j= 6<br>k= 12<br>l= 24</p></blockquote><p>iota 表示从 0 开始自动加 1，所以 <strong>i=1&lt;&lt;0</strong>, <strong>j=3&lt;&lt;1</strong>（<strong>&lt;&lt;</strong> 表示左移的意思），即：i=1, j=6，这没问题，关键在 k 和 l，从输出结果看 <strong>k=3&lt;&lt;2</strong>，<strong>l=3&lt;&lt;3</strong>。</p><p>简单表述:</p><ul><li><p>i=1</p></li><li><p>：左移 0 位,不变仍为 1;</p></li><li><p><strong>j=3</strong>：左移 1 位,变为二进制 110, 即 6;</p></li><li><p><strong>k=3</strong>：左移 2 位,变为二进制 1100, 即 12;</p></li><li><p><strong>l=3</strong>：左移 3 位,变为二进制 11000,即 24。</p></li></ul><h4 id="用来定义数量级"><a href="#用来定义数量级" class="headerlink" title="用来定义数量级"></a>用来定义数量级</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">_  = <span class="literal">iota</span></span><br><span class="line">KB = <span class="number">1</span> &lt;&lt; (<span class="number">10</span> * <span class="literal">iota</span>)</span><br><span class="line">MB = <span class="number">1</span> &lt;&lt; (<span class="number">10</span> * <span class="literal">iota</span>)</span><br><span class="line">GB = <span class="number">1</span> &lt;&lt; (<span class="number">10</span> * <span class="literal">iota</span>)</span><br><span class="line">TB = <span class="number">1</span> &lt;&lt; (<span class="number">10</span> * <span class="literal">iota</span>)</span><br><span class="line">PB = <span class="number">1</span> &lt;&lt; (<span class="number">10</span> * <span class="literal">iota</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>注意：</p><p><code>&lt;&lt;n == *(2^n)</code></p><p>左移运算符 <strong>&lt;&lt;</strong> 是双目运算符。左移 n 位就是乘以 2 的 n 次方。 其功能把 <strong>&lt;&lt;</strong> 左边的运算数的各二进位全部左移若干位，由 <strong>&lt;&lt;</strong> 右边的数指定移动的位数，高位丢弃，低位补 0。</p><p>右移运算符 <strong>&gt;&gt;</strong> 是双目运算符。右移 n 位就是除以 2 的 n 次方。 其功能是把 <strong>&gt;&gt;</strong> 左边的运算数的各二进位全部右移若干位， <strong>&gt;&gt;</strong> 右边的数指定移动的位数。</p><div class="note warning">            <p>本节部分内容引自<a href="https://www.runoob.com/go/go-variables.html" target="_blank" rel="noopener">菜鸟教程</a> <a href="https://www.liwenzhou.com/posts/Go/01_var_and_const/" target="_blank" rel="noopener">李文周的博客</a></p>          </div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="GO语言基础" scheme="http://threereyed.top/categories/GO%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="go" scheme="http://threereyed.top/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言基础学习day01</title>
    <link href="http://threereyed.top/2020/05/20/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0day01/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0day01/"/>
    <id>http://threereyed.top/2020/05/20/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0day01/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0day01/</id>
    <published>2020-05-20T14:17:49.000Z</published>
    <updated>2020-05-25T06:53:24.358Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>每天记录一点点之go语言基础学习第一天</strong></p><h4 id="一、Golang的环境搭建"><a href="#一、Golang的环境搭建" class="headerlink" title="一、Golang的环境搭建"></a>一、Golang的环境搭建</h4><ol><li>go下载</li><li>配置环境变量</li></ol><p>可参考大佬博客 <a href="https://www.liwenzhou.com/posts/Go/install_go_dev/" target="_blank" rel="noopener">https://www.liwenzhou.com/posts/Go/install_go_dev/</a></p><h4 id="二、ide-下载"><a href="#二、ide-下载" class="headerlink" title="二、ide 下载"></a>二、ide 下载</h4><p>go语言支持utf-8编码，只要能支持utf-8编码的都可以写go程序，</p><p>一般使用Goland、Vs code、Sublime，Goland 大型项目使用，但是容易卡顿，JB的软件大都这样，Vs code需要自己下载插件来用</p><h4 id="三、Go-工程目录"><a href="#三、Go-工程目录" class="headerlink" title="三、Go 工程目录"></a>三、Go 工程目录</h4><p><img src="https://i.loli.net/2020/05/23/fXzDQRLnVgy7AO6.png" alt=""></p><h4 id="三、第一个go程序"><a href="#三、第一个go程序" class="headerlink" title="三、第一个go程序"></a>三、第一个go程序</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello World"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="四、编译"><a href="#四、编译" class="headerlink" title="四、编译"></a>四、编译</h4><ul><li><p><code>go build</code> ：程序写完之后使用go build 进行编译，编译完成后生成可执行文件（windows下为后缀为.exe 的文件）</p></li><li><p><code>go install</code>:  go install 执行了两个步骤，先执行go build 再将生成的可执行文件拷贝到go path 的bin目录下</p></li><li><p><code>go build -o 文件名</code> :  -o 可以重新指定文件名 </p></li><li><p><code>go run</code>:  执行脚本文件</p></li><li><p>交叉编译：</p><p>在windows下可以编译在linux平台执行的文件</p><p>只需要指定目标操作系统的平台和处理器架构即可：</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;SET CGO_ENABLED=0  // 禁用CGO</span><br><span class="line">&gt;SET GOOS=linux  // 目标平台是linux</span><br><span class="line">&gt;SET GOARCH=amd64  // 目标处理器架构是amd64</span><br></pre></td></tr></table></figure><p><em>使用了cgo的代码是不支持跨平台编译的</em></p><p>然后再执行<code>go build</code>命令，得到的就是能够在Linux平台运行的可执行文件了。</p></blockquote></li></ul><h4 id="五、运行程序"><a href="#五、运行程序" class="headerlink" title="五、运行程序"></a>五、运行程序</h4><p>编译之后点击可执行文件既可以运行程序</p>]]></content>
    
    <summary type="html">
    
      Go语言基础学习day01
    
    </summary>
    
    
      <category term="GO语言基础" scheme="http://threereyed.top/categories/GO%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="go" scheme="http://threereyed.top/tags/go/"/>
    
  </entry>
  
</feed>
